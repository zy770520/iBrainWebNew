---
description: 
globs: 
alwaysApply: false
---
{
  "api_calls": {
    "error_handling": "统一处理HTTP请求错误",
    "loading_state": "显示加载状态",
    "response_format": "统一的响应格式处理"
  },
  "component_reuse": {
    "card_components": "可复用的卡片组件",
    "form_components": "标准化的表单组件",
    "dialog_components": "模态框组件"
  },
  "cross_origin_handling": {
    "images": "使用crossorigin='anonymous'属性处理跨域图像",
    "request_headers": "统一配置跨域请求头"
  }
}

### 基础架构
框架：Vue 2.0
UI组件库：ElementUI
样式语言：SCSS
状态管理：Vuex
网络请求：axios, EventSource
构建工具：Webpack
语言：JavaScript

### 目录结构规范
src/
├── api/                 # API接口定义
│   ├── auth.js          # 认证相关接口
│   ├── register.js      # 注册相关接口
│   ├── workflowConfig.js # 工作流配置接口
│   └── ...
├── assets/              # 静态资源
│   ├── images/          # 图片资源
│   ├── icons/           # 图标资源
│   └── fonts/           # 字体资源
├── components/          # 全局公共组件
├── router/              # 路由配置
├── store/               # Vuex状态管理
├── styles/              # 全局样式
│   ├── variables.scss   # 样式变量
│   ├── reset.scss       # 重置样式
│   └── common.scss      # 公共样式
├── utils/               # 工具函数
│   ├── request.js       # 请求封装
│   ├── auth.js          # 认证工具
│   ├── validator.js     # 验证器
│   └── index.js         # 工具索引
├── views/               # 页面组件
│   ├── login/           # 登录相关页面
│   ├── console/         # 控制台相关页面
│   ├── crop/            # 图像裁剪相关页面
│   ├── register/        # 注册相关页面
│   │   ├── hardware/    # 硬件注册
│   │   └── software/    # 软件注册
│   ├── workflowConfig/  # 工作流配置
│   └── ...
└── App.vue              # 应用入口组件
└── main.js              # 应用入口文件
### 命名规范
文件命名:
  - 组件文件：使用PascalCase，例如：LoginForm.vue
  - 视图文件：使用camelCase，例如：login.vue, workflowConfig.vue
  - 工具文件：使用camelCase，例如：authUtils.js

变量命名:
  - 普通变量：使用camelCase，例如：userName, passwordInput
  - 常量：使用UPPER_SNAKE_CASE，例如：API_URL, MAX_RETRY_COUNT
  - 组件名：使用PascalCase，例如：LoginForm, QualityCard
  - 私有属性/方法：使用下划线前缀，例如：_handleLogin, _formData

CSS类名:
  - 使用kebab-case，例如：login-container, header-logo
  - 使用BEM命名规范：block-name__element-name--modifier-name
4. 登录页面规范
  页面结构:
  - 清晰的表单布局，使用el-form组件
  - 显示明确的错误提示信息
  - 提供记住账号功能
  - 登录状态加载效果

样式规范:
  - 遵循公司VI设计规范
  - 表单元素统一高度和内边距
  - 错误信息红色显示
  - 按钮使用主色调

校验规范:
  - 用户名/密码不能为空
  - 密码最小长度限制
  - 提交前前端校验，提交后后端校验
  - 登录失败显示具体原因

本地存储:
  - 使用localStorage存储token
  - 记住账号功能使用localStorage
  5. CSS样式规范
  全局样式:
  - 使用reset.scss统一重置默认样式
  - 定义全局变量用于颜色、字体、间距等
  - 避免!important的使用
  - 媒体查询规范，确保响应式布局

组件样式:
  - 使用scoped属性限制样式作用域
  - 关键尺寸使用变量定义
  - z-index分层管理，避免随意设置
  - flex布局优先，减少传统定位方式

命名规范:
  - 容器类：container, wrapper, box, card
  - 位置类：header, footer, side, content
  - 状态类：active, disabled, selected, loading

响应式规范:
  - 断点设置：xs(<768px), sm(≥768px), md(≥992px), lg(≥1200px), xl(≥1920px)
  - 移动优先设计，从小屏幕向大屏幕适配
  
### API接口规范
请求封装:
  - 统一使用request.js封装axios
  - 请求拦截器添加token和必要headers
  - 响应拦截器统一处理错误
  - 401状态码自动跳转登录页

接口组织:
  - 按模块划分文件
  - 每个接口函数返回Promise
  - 接口函数命名动词+名词，例如：getUser, updateConfig

错误处理:
  - 网络错误统一处理
  - 业务错误单独处理
  - 错误信息通过ElementUI的Message组件展示
  - 关键操作错误提供重试机制

实时数据:
  - 使用EventSource进行服务器推送
  - 组件销毁时关闭连接
  - 重连机制处理连接中断情况
  - 数据预处理，转换为组件可直接使用的格式
  7. 表单校验规范
  校验方式:
  - 使用ElementUI的表单校验功能
  - 自定义复杂校验规则
  - 统一的触发方式：blur和change结合

通用校验规则:
  - 必填项：required: true
  - 数字类型：类型检查+范围限制
  - IP地址：正则表达式验证
  - 文件上传：类型和大小限制

错误提示:
  - 简洁明了的错误信息
  - 中文提示，避免技术术语
  - 即时反馈，及时校验

特殊校验:
  - 相机参数：合理的范围限制，如曝光时间、增益值>0
  - 工作流参数：根据业务逻辑确定有效值范围
  - 文件导入：格式预检查和数据有效性验证
### 硬件注册规范
  注册流程:
  - 清晰的步骤提示
  - 进度指示器显示当前步骤
  - 参数验证和有效性检查
  - 操作结果明确反馈

数据管理:
  - 使用Vuex存储注册信息
  - 分步骤保存表单数据
  - 注册成功后更新全局状态

界面交互:
  - 表单分组，相关参数放在一起
  - 复杂参数提供帮助提示
  - 危险操作提供确认机制
  - 支持批量导入配置

数据校验:
  - IP地址格式和有效性验证
  - 设备ID唯一性检查
  - 必要参数完整性检查
  - 参数之间关联性验证
  9. 软件注册规范
  注册界面:
  - 简洁明了的表单布局
  - 分类管理不同类型软件
  - 版本信息明确显示
  - 许可信息和使用条款

配置管理:
  - 配置参数分组展示
  - 高级配置可折叠显示
  - 参数间依赖关系处理
  - 配置导入/导出功能

版本控制:
  - 显示当前版本和可用更新
  - 版本历史记录查看
  - 更新日志显示
  - 自动/手动更新选项

授权管理:
  - 授权状态明确显示
  - 临近过期提醒
  - 授权续期流程
  - 授权错误明确提示
  10. 触发系统规范
触发配置:
  - 触发模式选择（手动/自动）
  - 触发条件设置
  - 触发延迟参数
  - 连续触发间隔设置

安全机制:
  - 触发操作确认
  - 紧急停止功能
  - 异常情况自动停止
  - 权限控制，限制触发操作人员

状态管理:
  - 清晰的触发状态指示
  - 历史触发记录
  - 触发结果反馈
  - 错误日志记录

接口规范:
  - 统一的触发API
  - 结构化的参数传递
  - 标准的响应格式
  - 异步操作状态跟踪
### 工作流配置规范
  界面布局:
  - 清晰的工作流视图
  - 拖拽式节点配置
  - 节点之间连线表示依赖关系
  - 节点状态颜色区分

节点类型:
  - 相机节点：采集图像
  - 算法节点：处理数据
  - 条件节点：业务逻辑分支
  - 输出节点：结果处理

配置存储:
  - 结构化JSON格式
  - 版本控制支持回滚
  - 配置模板保存和复用
  - 导入/导出配置

特定规则:
  - Quality类型使用workflow-class样式
  - 非Quality类型使用workflow-monitor-class样式
  - 相机参数限制：增益值和曝光时间>0
  - 工作流名称唯一性验证
### 图像处理规范
  显示规则:
  - 支持缩放、平移操作
  - 黑白/彩色图像自动识别
  - 像素值显示功能
  - 跨域图像处理（crossorigin="anonymous"）

性能优化:
  - 大图像懒加载
  - Canvas适当缓存策略
  - 图像处理操作节流/防抖
  - 显示区域裁剪，减少内存占用

交互体验:
  - 图像加载进度提示
  - 放大镜功能
  - 鼠标悬停显示像素信息
  - 操作撤销/重做支持

数据处理:
  - 像素值计算：灰度值或RGB值
  - 增量值显示（当前值减去上一次值）
  - 跨域错误优雅降级
  - 资源释放确保无内存泄漏
### 组件通信规范
  父子组件:
  - Props向下传递数据
  - Events向上传递事件
  - $refs直接访问子组件方法，限制使用

非父子组件:
  - EventBus用于简单通信
  - Vuex管理共享状态
  - 避免过深的组件嵌套

数据流向:
  - 单向数据流
  - 避免直接修改props
  - 使用computed派生数据
  - watch监听变化并处理副作用

生命周期:
  - created：初始化数据
  - mounted：DOM操作、API调用
  - beforeDestroy：清理资源、事件监听
  - updated：谨慎使用，避免无限循环
  14. 性能优化规范
  加载优化:
  - 路由懒加载
  - 组件按需导入
  - 第三方库按需引入
  - 图片资源压缩和适当格式选择

渲染优化:
  - 大列表虚拟滚动
  - key属性正确使用
  - 避免不必要的计算属性
  - DOM操作批量处理

数据处理:
  - 本地数据缓存
  - 防抖和节流处理
  - 避免深层嵌套对象
  - JSON序列化/反序列化优化

内存管理:
  - 组件销毁时清除事件监听
  - 释放大对象引用
  - 避免闭包导致的内存泄漏
  - 合理使用keep-alive
  15. 错误处理规范
  前端错误:
  - try/catch捕获关键操作错误
  - window.onerror全局错误处理
  - Promise错误使用catch处理
  - 组件错误边界处理

API错误:
  - HTTP状态码标准化处理
  - 业务错误码映射到用户友好提示
  - 网络错误自动重试机制
  - 授权失效统一处理

错误反馈:
  - 用户友好的错误提示
  - 关键错误记录日志
  - 严重错误上报服务器
  - 提供问题反馈渠道

调试辅助:
  - 开发环境详细错误信息
  - 生产环境简化错误提示
  - 条件性日志记录
  - 性能标记点监控
### 国际化规范
  文本管理:
  - i18n配置文件按模块组织
  - 避免硬编码文本
  - 日期、数字、货币格式本地化
  - 多语言切换无需刷新

语言支持:
  - 默认中文
  - 英文作为备选语言
  - 根据浏览器语言自动选择
  - 用户手动切换并记住选择

翻译流程:
  - 使用命名空间避免冲突
  - 变量插值统一使用{name}格式
  - 复数形式处理
  - 翻译文件版本控制

特殊处理:
  - 图片文字替代方案
  - 自适应布局适应不同语言文本长度
  - RTL语言支持准备
  - 特定区域自定义格式
### 安全规范
  认证授权:
  - 基于JWT的认证机制
  - 敏感操作二次验证
  - 权限细粒度控制
  - 会话超时自动登出

数据安全:
  - 敏感数据加密传输
  - 本地存储敏感信息加密
  - 表单数据提交前验证
  - 文件上传类型和大小限制

防御措施:
  - XSS防御：内容安全策略
  - CSRF防御：请求令牌
  - 点击劫持防护
  - 输入数据过滤和转义

安全更新:
  - 定期更新依赖包
  - 安全漏洞响应机制
  - 代码审查关注安全问题
  - 生产环境移除调试信息
### 代码提交规范
  提交信息:
  - 格式：<类型>(<范围>): <描述>
  - 类型：feat, fix, docs, style, refactor, test, chore
  - 描述简明扼要，50个字符以内
  - 详细说明另起一行

分支管理:
  - master: 稳定生产版本
  - develop: 开发集成分支
  - feature/*: 新功能分支
  - hotfix/*: 紧急修复分支

合并策略:
  - 功能完成后提交Pull Request
  - 至少一名代码审查通过
  - CI测试通过
  - 解决所有冲突

版本管理:
  - 遵循语义化版本
  - 重大版本更新提供迁移指南
  - 更新日志详细记录变更
  - 发布前完整测试


















 